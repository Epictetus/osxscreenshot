module OSX
  module Screenshot
    VERSION = '0.0.2'

    ##
    # Takes a screenshot of a website, optionally resizes it, and writes
    # it to a temporary directory. Returns the file path to the
    # temporary file.
    #
    # It's assumed that you will move the file to a permanent
    # destination or store it in a database.
    #
    # Options include:
    #
    # tmpdir::     Path to tmp directory where files will be stored
    # webkit2png:: Path to webkit2png.py command
    # mogrify::    Path to mogrify command
    #
    # Usage:
    #
    #   output_screenshot_path =
    #     OSX::Screenshot.capture(article_url, {
    #                        :tmpdir     => "#{Sinatra::Application.root}/tmp",
    #                        :webkit2png => "#{Sinatra::Application.root}/bin/webkit2png.py",
    #                        :mogrify    => "/opt/local/bin/mogrify",
    #                        :width      => 220,
    #                        :height     => 270
    #                      })
    #   system "mv #{output_screenshot_path} #{local_path}"

    def self.capture(url, options={})
      vendored_webkit2png = File.expand_path(File.join(File.dirname(__FILE__),
                                                       "..",
                                                       "vendor",
                                                       "webkit2png.py"))
      options = {
        :tmpdir     => "/tmp",
        :webkit2png => vendored_webkit2png,
        :mogrify    => "mogrify",
        :width      => 320,
        :height     => 480
      }.merge(options)

      random_id        = [url.length, Time.now.to_i.to_s, rand(10000)].join('-')
      tmp_abs_filename = File.join(options[:tmpdir], "#{random_id}-full.png")
      tmp_dir          = File.dirname(tmp_abs_filename)
      FileUtils.mkdir_p(tmp_dir)

      webkit2png_command = options[:webkit2png]

      system(*[webkit2png_command,
               "--full",
               "--filename",    random_id,
               "--dir",         options[:tmpdir],
               url
              ])

      # Example: mogrify -resize 320x peepcodecom-full.png -crop 320x480 peepcodecom-full.png
      mogrify_command = options[:mogrify]
      target_width    = options[:width]
      target_height   = options[:height]
      system(*[mogrify_command,
               "-resize", "#{target_width}x",
               tmp_abs_filename,
               "-crop",   "#{target_width}x#{target_height}",
               tmp_abs_filename
              ])

      output_filename = if File.exist?(tmp_abs_filename)
                          # Add full width and height to image
                          system(*[mogrify_command,
                                   "-extent", "#{target_width}x#{target_height}",
                                   tmp_abs_filename])
                          tmp_abs_filename
                        elsif File.exist?(tmp_abs_filename.gsub(/\.png/, '-0.png'))
                          # Remove extra file generated by cropping.
                          FileUtils.rm(tmp_abs_filename.gsub(/\.png/, '-1.png'))
                          tmp_abs_filename.gsub(/\.png/, '-0.png')
                        end
      return output_filename
    end

  end
end


